{
	"info": {
		"_postman_id": "ce1faaf7-c70c-45b5-af7a-0e4b2e2aa00e",
		"name": "HW_2(byTolya)_4.3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21446450"
	},
	"item": [
		{
			"name": "EP_user_info_2(4.3_task_byTolya)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let responJS = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requeJS = request.data\r",
							"\r",
							"//1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все \r",
							"//проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно \r",
							"//видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"//const propertyArray = [\"start_qa_salary\", \"qa_salary_after_6_months\", \"qa_salary_after_12_months\",\r",
							"//    \"qa_salary_after_1.5_year\", \"qa_salary_after_3.5_years\", \"person\"]\r",
							"//for(let key in propertyArray){\r",
							"//pm.test(`${+key + 8}. Check response have property ${propertyArray[key]}`, () => pm.expect(responJS).to.have.property(propertyArray[key]))\r",
							"//}\r",
							"//2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким \r",
							"//образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). \r",
							"//Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"//const koefArr = [1, 2, 2.7, 3.3, 3.8]\r",
							"//for(let key in propertArr){\r",
							"//    pm.test(`${key + 14}. Check response.${propertArr[key]} === request.salary * ${koefArr[key]}`, () => {\r",
							"//        pm.expect(responJS[propertArr[key]]).to.eql(requeJS.salary * koefArr[key])\r",
							"//        })\r",
							"//}\r",
							"\r",
							"//3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут //проходить ОБА теста.\r",
							"const propertyArray = [\"start_qa_salary\", \"qa_salary_after_6_months\", \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_1.5_year\", \"qa_salary_after_3.5_years\", \"person\"]\r",
							"const koefArr = [1, 2, 2.7, 3.3, 3.8]\r",
							"for(let key in propertyArray){\r",
							"pm.test(`${+key + 8}. Check response have property ${propertyArray[key]}`, () => pm.expect(responJS).to.have.property(propertyArray[key]))\r",
							"if(key < propertyArray.length - 1){\r",
							"pm.test(`${+key + 14}. Check response.${propertyArray[key]} === request.salary * ${koefArr[key]}`, () => {\r",
							"        pm.expect(responJS[propertyArray[key]]).to.eql(requeJS.salary * koefArr[key])\r",
							"        })\r",
							"}\r",
							"}\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из // request.)\r",
							"pm.test(\"19. Check responJS.person.u_name[1] == requeJS.salary\", () => pm.expect(responJS.person.u_name[1]).to.eql(+requeJS.salary))\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"20. Check responJS.u_age == requeJS.age\", () => pm.expect(responJS.person.u_age).to.eql(+requeJS.age))\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"21. Check responJS.u_salary_5_years == requeJS.salary * 4.2\", () => pm.expect(responJS.person.u_salary_5_years).to.eql(requeJS.salary * 4.2))\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i in responJS.person) {\r",
							"    console.log(`${i}: ${responJS.person[i]}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}