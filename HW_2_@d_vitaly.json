{
	"info": {
		"_postman_id": "16dc0140-230c-44fb-83a0-b01d193f4add",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21446450"
	},
	"item": [
		{
			"name": "EP_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Check string\", () => {\r",
							"    let resp = pm.response.text()\r",
							"    pm.expect(resp).to.eql(\"This is the first responce from server!\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responJS = pm.response.json()\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", () => pm.expect(responJS.name).to.eql(\"Vitaly\"))\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", () => pm.expect(responJS.age).to.eql(\"30\"))\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", () => pm.expect(responJS.salary).to.eql(3000))\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requeJS = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name (use reqData)\", () => pm.expect(responJS.name).to.eql(requeJS.name))\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age (use reqData)\", () => pm.expect(responJS.age).to.eql(requeJS.age))\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary (use reqData)\", () => pm.expect(responJS.salary).to.eql(+requeJS.salary))\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(responJS.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year === salary * 4\", () => pm.expect(responJS.family.u_salary_1_5_year).to.eql(requeJS.salary * 4))  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responJS = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const paramsString = request.url.split('?')[1];\r",
							"const eachParamArray = paramsString.split('&');\r",
							"let requeJS = {};\r",
							"eachParamArray.forEach((param) => {\r",
							"    const key = param.split('=')[0];\r",
							"    const value = param.split('=')[1];\r",
							"    Object.assign(requeJS, {[key]: value});\r",
							"});\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name (use reqData)\", () => pm.expect(responJS.name).to.eql(requeJS.name))\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age (use reqData)\", () => pm.expect(responJS.age).to.eql(requeJS.age))\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary (use reqData)\", () => pm.expect(responJS.salary).to.eql(+requeJS.salary))\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(responJS.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check name of Dog\", () => pm.expect(responJS.family.pets.dog).to.have.property(\"name\"))\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check age of Dog\", () => pm.expect(responJS.family.pets.dog).to.have.property(\"age\"))\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check name is Luky\", () => pm.expect(responJS.family.pets.dog.name).to.eql(\"Luky\"))\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check age is 4\", () => pm.expect(responJS.family.pets.dog.age).to.eql(4))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responJS = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"requeJS = {}\r",
							"const paramsString = request.url.split('?')[1];\r",
							"const eachParamArray = paramsString.split('&');\r",
							"eachParamArray.forEach((param) => {\r",
							"    const key = param.split('=')[0];\r",
							"    const value = param.split('=')[1];\r",
							"    Object.assign(requeJS, {[key]: value});\r",
							"});\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check eql nameRequest & nameResponse\", () => pm.expect(requeJS.name).to.eql(responJS.name))\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check eql ageRequest & ageResponse\", () => pm.expect(+requeJS.age).to.eql(responJS.age))\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requeJS.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(responJS.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(responJS.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(responJS.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(responJS.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check response.salary[0] === request.salary\", () => pm.expect(+requeJS.salary).to.eql(responJS.salary[0]))\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check response.salary[1] === request.salary * 2\", () => pm.expect(+responJS.salary[1]).to.eql(requeJS.salary * 2))\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check response.salary[2] === request.salary * 3\", () => pm.expect(+responJS.salary[2]).to.eql(requeJS.salary * 3))\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name1\", \"\")\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age1\")\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary1\")\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name1\", responJS.name)\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age1\", responJS.age)\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary1\", responJS.salary[0])\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"responJS.salary.forEach(item => console.log(+item))"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let responJS = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requeJS = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check response have property start_qa_salary\", () => pm.expect(responJS).to.have.property(\"start_qa_salary\"))\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check response have property qa_salary_after_6_months\", () => pm.expect(responJS).to.have.property(\"qa_salary_after_6_months\"))\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check response have property qa_salary_after_12_months\", () => pm.expect(responJS).to.have.property(\"qa_salary_after_12_months\"))\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check response have property qa_salary_after_1.5_year\", () => pm.expect(responJS).to.have.property(\"qa_salary_after_1.5_year\"))\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check response have property qa_salary_after_3.5_years\", () => pm.expect(responJS).to.have.property(\"qa_salary_after_3.5_years\"))\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check response have property person\", () => pm.expect(responJS).to.have.property(\"person\"))\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check response.start_qa_salary === request.salary\", () => pm.expect(responJS.start_qa_salary).to.eql(+requeJS.salary))\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check response.qa_salary_after_6_months === request.salary*2\", () => pm.expect(responJS.qa_salary_after_6_months).to.eql(requeJS.salary * 2))\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из // request.)\r",
							"pm.test(\"Check qa_salary_after_12_months === request.salary * 2.7\", () => pm.expect(responJS.qa_salary_after_12_months).to.eql(requeJS.salary * 2.7))\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из // request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year === request.salary * 3.3\", () => pm.expect(responJS['qa_salary_after_1.5_year']).to.eql(requeJS.salary * 3.3))\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из // request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years === request.salary * 3.8\", () => pm.expect(responJS['qa_salary_after_3.5_years']).to.eql(requeJS.salary * 3.8))\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из // request.)\r",
							"pm.test(\"Check responJS.person.u_name[1] == requeJS.salary\", () => pm.expect(responJS.person.u_name[1]).to.eql(+requeJS.salary))\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check responJS.u_age == requeJS.age\", () => pm.expect(responJS.person.u_age).to.eql(+requeJS.age))\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check responJS.u_salary_5_years == requeJS.salary * 4.2\", () => pm.expect(responJS.person.u_salary_5_years).to.eql(requeJS.salary * 4.2))\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i in responJS.person) {\r",
							"    console.log(`${i}: ${responJS.person[i]}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_user_info_2(byTolya)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let responJS = pm.response.json()\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let requeJS = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check response have property start_qa_salary\", () => pm.expect(responJS).to.have.property(\"start_qa_salary\"))\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check response have property qa_salary_after_6_months\", () => pm.expect(responJS).to.have.property(\"qa_salary_after_6_months\"))\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check response have property qa_salary_after_12_months\", () => pm.expect(responJS).to.have.property(\"qa_salary_after_12_months\"))\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check response have property qa_salary_after_1.5_year\", () => pm.expect(responJS).to.have.property(\"qa_salary_after_1.5_year\"))\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check response have property qa_salary_after_3.5_years\", () => pm.expect(responJS).to.have.property(\"qa_salary_after_3.5_years\"))\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check response have property person\", () => pm.expect(responJS).to.have.property(\"person\"))\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check response.start_qa_salary === request.salary\", () => pm.expect(responJS.start_qa_salary).to.eql(+requeJS.salary))\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check response.qa_salary_after_6_months === request.salary*2\", () => pm.expect(responJS.qa_salary_after_6_months).to.eql(requeJS.salary * 2))\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из // request.)\r",
							"pm.test(\"Check qa_salary_after_12_months === request.salary * 2.7\", () => pm.expect(responJS.qa_salary_after_12_months).to.eql(requeJS.salary * 2.7))\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из // request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year === request.salary * 3.3\", () => pm.expect(responJS['qa_salary_after_1.5_year']).to.eql(requeJS.salary * 3.3))\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из // request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years === request.salary * 3.8\", () => pm.expect(responJS['qa_salary_after_3.5_years']).to.eql(requeJS.salary * 3.8))\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из // request.)\r",
							"pm.test(\"Check responJS.person.u_name[1] == requeJS.salary\", () => pm.expect(responJS.person.u_name[1]).to.eql(+requeJS.salary))\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check responJS.u_age == requeJS.age\", () => pm.expect(responJS.person.u_age).to.eql(+requeJS.age))\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check responJS.u_salary_5_years == requeJS.salary * 4.2\", () => pm.expect(responJS.person.u_salary_5_years).to.eql(requeJS.salary * 4.2))\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (i in responJS.person) {\r",
							"    console.log(`${i}: ${responJS.person[i]}`)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name1",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": ""
		}
	]
}