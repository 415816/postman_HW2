{
	"info": {
		"_postman_id": "ecc84a8f-892d-42ac-9c24-3f4c5ea5cb9d",
		"name": "HW_2(byTolya)_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21446450"
	},
	"item": [
		{
			"name": "EP_object_info_3(3_task_byTolya)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let responJS = pm.response.json()\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const paramsString = request.url.split('?')[1];\r",
							"const eachParamArray = paramsString.split('&');\r",
							"let requeJS = {};\r",
							"eachParamArray.forEach((param) => {\r",
							"    const key = param.split('=')[0];\r",
							"    const value = param.split('=')[1];\r",
							"    Object.assign(requeJS, {[key]: value});\r",
							"});\r",
							"\r",
							"//3. http://162.55.220.72:5005/object_info_3\r",
							"// Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это \r",
							"//делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"//pm.test(\"Check name (use reqData)\", () => pm.expect(responJS.name).to.eql(requeJS.name))\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"//pm.test(\"Check age (use reqData)\", () => pm.expect(responJS.age).to.eql(requeJS.age))\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//pm.test(\"Check salary (use reqData)\", () => pm.expect(responJS.salary).to.eql(+requeJS.salary))\r",
							"//5-6-7\r",
							"const deepEqual = (obj1, obj2) => {\r",
							"    if(typeof obj1 === \"object\" && typeof obj2 === \"object\") {\r",
							"        for(let key in obj1){\r",
							"            if(!obj2.hasOwnProperty(key)) return false\r",
							"            if(typeof obj1[key] === \"object\") {\r",
							"                const deep = deepEqual(obj1[key], obj2[key])\r",
							"                if (!deep) return false \r",
							"        } else if(obj1[key] !== obj2[key]) return false\r",
							"        }\r",
							"        return true\r",
							"    } else return obj1 === obj2\r",
							"}\r",
							"pm.test(\"Check name, age and salary\", () => {\r",
							"    pm.expect(deepEqual(responJS, requeJS))\r",
							"})\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(responJS.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check name of Dog\", () => pm.expect(responJS.family.pets.dog).to.have.property(\"name\"))\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check age of Dog\", () => pm.expect(responJS.family.pets.dog).to.have.property(\"age\"))\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check name is Luky\", () => pm.expect(responJS.family.pets.dog.name).to.eql(\"Luky\"))\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check age is 4\", () => pm.expect(responJS.family.pets.dog.age).to.eql(4))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}